<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>git撤销commit的某些文件</title>
    <link href="/2022/06/30/06_git%E6%92%A4%E9%94%80commit%E7%9A%84%E6%9F%90%E4%BA%9B%E6%96%87%E4%BB%B6/"/>
    <url>/2022/06/30/06_git%E6%92%A4%E9%94%80commit%E7%9A%84%E6%9F%90%E4%BA%9B%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<p>git reset HEAD^ <filename><br>修改的全部到了暂存区<br>git restore .<br>git commit –amend</p><p>主要是需要继承上次一的commit</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>solve &quot;github deploy reset custom domain&quot;</title>
    <link href="/2022/06/30/05_github-domain-reset/"/>
    <url>/2022/06/30/05_github-domain-reset/</url>
    
    <content type="html"><![CDATA[<p>这边的 GitHub Page有两个分支 </p><ul><li>source 用来写文章 跨设备也可以直接clone下来</li><li>main 用来做hexo生成的静态部署</li></ul><p>那现在就有一个问题，<br>配置完custom domain后每次的deploy都会重置domain这项配置</p><p>搜索后发现deploy的文件根目录需要有 <code>CNAME</code> 的文件 第一行内容是自己的domain，<br>但hexo每次发布其实都会先clean再重新生成静态文件做发布，<br>那就需要再deploy命令同时给public文件夹加入<code>CNAME</code>文件</p><p>可以重写package.json的脚本文件 每次build时新增CNAME文件到public  </p><p>参考 ：<a href="https://github.com/tschaub/gh-pages/issues/213">issues (https://github.com/tschaub/gh-pages/issues/213)</a></p><figure><div class="code-wrapper"><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token string">"build"</span><span class="token builtin class-name">:</span> <span class="token string">"hexo generate"</span>------<span class="token string">"build"</span><span class="token builtin class-name">:</span> <span class="token string">"hexo generate &amp;&amp; echo 'leeinn.cc' > ./public/CNAME"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></div></figure><p>测试可行</p><h1 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h1><p>重读了hexo官方doc 终于发现了最佳实践，<br>现在一个repo下拆的写作分支明文裸奔确实不合适，<br>github还不能对某个分支单独做权限设置，<br>所以这就新建一个新private repo！</p><p>参考：<br><a href="https://hexo.io/zh-cn/docs/one-command-deployment.html">hexo deploy doc</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>node处理文件结构</title>
    <link href="/2022/06/07/04_node-fIle-system/"/>
    <url>/2022/06/07/04_node-fIle-system/</url>
    
    <content type="html"><![CDATA[<p>switch截图在本机是按游戏文件夹分类 um很合理<br>但截图数超1k就必须上sd卡 um京东立马下单,不能影响我记录xb2<br>但导出的时候发现Album文件夹下怎么会有这么多日期子文件夹<br>几千张截图就这么分散在几十个folder里??</p><p>belike:</p><figure><div class="code-wrapper"><pre class="line-numbers language-none"><code class="language-none">Album└── (Year)    └── (Month)        └── (Day)            ├── 01.jpg            ...            └── 31.jpg对比本机路径：Album├── xb2|   ├── 01.jpg|   └── 02.jpg ├── mhxx...└── zelda<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>很离谱的嵌套千层饼 如果是31天就是31个文件夹的分散图片 就算想给截图手动按游戏分类 但在不解决folder层级前也是耗时很高的电子拧螺丝</p><p>好的现在目标明确了 <strong>打平文件层级</strong><br>再倒推技术实现过程 打平层级 -&gt; 移动所有文件 -&gt; 递归获取所有文件路径 -&gt; node fs模块</p><p>用到的fs模块：</p><ul><li>readdir </li><li>stat (子方法可以判断 文件or文件夹) </li><li>rename (修改路径名等价移动)</li></ul><figure><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">getFilePath</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">curPath<span class="token punctuation">,</span> func</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    fs<span class="token punctuation">.</span><span class="token function">readdirSync</span><span class="token punctuation">(</span>curPath<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span> <span class="token parameter">path</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> filePath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>curPath<span class="token punctuation">,</span> path<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span> fs<span class="token punctuation">.</span><span class="token function">statSync</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">func</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token function">getFilePath</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> func<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">moveFile</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">filePath</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> fileName <span class="token operator">=</span> filePath<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> myFolder <span class="token operator">=</span> <span class="token string">'myPic'</span>  <span class="token comment">// 新建的和js同级文件夹</span>    <span class="token keyword">const</span> newPath <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">./</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>myFolder<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>fileName<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span>          fs<span class="token punctuation">.</span><span class="token function">renameSync</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> newPath<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">run</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token string">'./Album'</span>    <span class="token function">getFilePath</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">filePath</span><span class="token punctuation">)</span><span class="token operator">=></span><span class="token punctuation">&#123;</span>        <span class="token function">moveFile</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><p>done (但游戏分类还得靠自己)</p><p>当然也可以继续改造 获取shell中的参数 手动确定文件路径 再自动创建文件夹等<br><code>process.argv</code> 的第三个及以后的值是输入的参数</p><figure><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token punctuation">[</span>nodeEnv<span class="token punctuation">,</span>dir<span class="token punctuation">,</span><span class="token operator">...</span>args<span class="token punctuation">]</span> <span class="token operator">=</span> process<span class="token punctuation">.</span>argv<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h1 id="延伸"><a href="#延伸" class="headerlink" title="延伸"></a>延伸</h1><p>那已经能拿到所有文件的路径了 还能做什么捏<br>我只能说有无限的可能</p><ul><li>批量改名</li><li>批量删除</li><li>…</li></ul><p>解放双手了bro</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>手写</title>
    <link href="/2022/03/29/03_code-implementation/"/>
    <url>/2022/03/29/03_code-implementation/</url>
    
    <content type="html"><![CDATA[<h1 id="快排"><a href="#快排" class="headerlink" title="快排"></a>快排</h1><ol><li>在数据集之中，选择一个元素作为”基准”（pivot）。</li><li>所有小于”基准”的元素，都移到”基准”的左边；所有大于”基准”的元素，都移到”基准”的右边。3. 对”基准”左边和右边的两个子集，不断重复第一步和第二步，直到所有子集只剩下一个元素为止。<figure><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> <span class="token function-variable function">quickSort</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> arr  <span class="token keyword">let</span> pivot <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>  <span class="token keyword">let</span> left <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">let</span> right <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> pivot<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      left<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>      right<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token function">quickSort</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> pivot<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token function">quickSort</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure></li></ol><h1 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all"></a>Promise.all</h1><p>传入一个数组 数组每一项promise都执行完后 才可以继续执行后续.then 成功返回每个promise结果的数组，某项reject时直接返回该项的状态值（失败）<br>all用来处理多个异步，belike一个页面上需要有多个ajax同时请求到后才正常显示 之前都使用loading </p><p>因为可以调用.then 所以all方法返回的也是一个promise对象 只是resolve()的时机由数组中的promise对象控制 </p><p>给每项promise对象手动加then</p><figure><div class="code-wrapper"><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">Promise<span class="token punctuation">.</span><span class="token function-variable function">myAll</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">var</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>len  <span class="token keyword">var</span> resolveRes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">of</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      i<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        resolveRes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>resolveRes<span class="token punctuation">.</span>length <span class="token operator">===</span> len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token function">resolve</span><span class="token punctuation">(</span>resolveRes<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">err</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>计网</title>
    <link href="/2022/03/24/02_networks/"/>
    <url>/2022/03/24/02_networks/</url>
    
    <content type="html"><![CDATA[<h1 id="1、GET请求和POST请求的区别？"><a href="#1、GET请求和POST请求的区别？" class="headerlink" title="1、GET请求和POST请求的区别？"></a>1、GET请求和POST请求的区别？</h1><p>GET 和 POST请求本质上就是 TCP链接，并无差别。但是由于 HTTP 和浏览器&#x2F;服务器的限制，导致他们在应用过程中出现了一些不同。</p><p>1、请求次数不同<br>  ○ GET请求会产生一个 TCP 的数据包<br>  ○ POST请求会产生两个TCP的数据包<br>  ○ 因为对于GET请求来说，浏览器会将 header 和 data一起发送出去，服务器响应200（返回数据）；但是对于 POST 请求来说，浏览器会先发送 header，其次服务器返回 100 countinue，然后再将 data 发送出去，最后服务器返回200<br>  ○ 另外的话，不是所有的浏览器都会在POST请求中发送两次包，火狐只会发送一次<br>2、参数的编码方式不同<br>  ○ GET只支持URL编码（ASCII 16进制）<br>  ○ POST请求支持多种编码方式<br>● 3、请求参数的位置不同<br>  ○ GET 请求的参数是拼接在 URL的后面<br>  ○ POST请求的参数是放在了请求体里面<br>  ○ 从这个角度来说，POST请求可能会比GET请求更安全，因为POST请求没有把参数放到url里（有了ssl、http就变成了https，解决了这个问题）<br>● 4、缓存<br>  ○ 对应GET请求来说，它会被浏览器进行缓存<br>  ○ 但是POST请求不会<br>● 5、应用场景不同<br>  ○ GET 请求一般用于对服务器资源不会产生影响的场景，比如说，请求一个网页<br>  ○ POST请求一般用于会对服务器资源产生影响的场景，比如说，注册用户等类似的操作</p><p>注意：http 协议并没，没有对get和post请求的长度进行限制，所谓的浏览器长度限制是由浏览器和 服务器决定和设置的。</p><h1 id="2、HTTP-的请求方法（9种）"><a href="#2、HTTP-的请求方法（9种）" class="headerlink" title="2、HTTP 的请求方法（9种）"></a>2、HTTP 的请求方法（9种）</h1><p>HTTP 1.0：HEAD、GET和POST<br>HTTP 1.1：其余6种<br>● GET<br>  ○ 向特定的资源发送请求，返回相应的数据<br>● HEAD<br>  ○ 和get 请求类似，只不过对应 head 而言，服务器不会返回响应体。<br>  ○ 最常见的好像就是在下载一个大文件前，先获取它的大小，然后再决定是否下载<br>● POST<br>  ○ 向指定的资源提交数据进行处理请求（上传文件或表单请求）<br>● OPTION<br>  ○ 预检请求，获取服务器所支持的通信选项（请求方式）<br>● PUT<br>  ○ 请求替换目标的资源<br>● DELETE<br>  ○ 删除指定的资源<br>● PATCH<br>  ○ 对指定的资源进行部分修改<br>● CONNECT<br>  ○ 开启一个客户端到所请求资源之间的一个通道<br>● TRACE<br>  ○ 请求的服务器返回其受到的请求信息，主要用来做 http 的测试和诊断</p><h1 id="3、http的请求头，响应头"><a href="#3、http的请求头，响应头" class="headerlink" title="3、http的请求头，响应头"></a>3、http的请求头，响应头</h1><p>请求头：<br>● Accpet<br>  ○ 告诉服务端,客户端接收什么类型的响应<br>● Referer<br>  ○ 表示这是请求是从哪个URL进来的,比如想在网上购物,但是不知道选择哪家电商平台,你就去问度娘,说哪家电商的东西便宜啊,然后一堆东西弹出在你面前,第一给就是某宝,当你从这里进入某宝的时候,这个请求报文的Referer就是<a href="http://www.baidu.com/">www.baidu.com</a><br>● Cache-Control<br>  ○ 对缓存进行控制,如一个请求希望响应的内容在客户端缓存一年,或不被缓可以通过这个报文头设置<br>● Accept-Encoding<br>  ○ 这个属性是用来告诉服务器能接受什么编码格式,包括字符编码,压缩形式(一般都是压缩形式)<br>    ■ 例如:Accept-Encoding:gzip, deflate(这两种都是压缩格式)<br>● Host<br>  ○ 指定要请求的资源所在的主机和端口<br>● User-Agent 作用：告诉服务器，客户端使用的操作系统、浏览器版本和名称<br>响应头：<br>● Cache-Control<br>  ○ 响应输出到客户端后,服务端通过该属性告诉客户端该怎么控制响应内容的缓存<br>● ETag<br>  ○ 表示你请求资源的版本,如果该资源发生啦变化,那么这个属性也会跟着变<br>● Location<br>  ○ 在重定向中或者创建新资源时使用<br>● Set-Cookie<br>  ○ 服务端可以设置客户端的cookie</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>搭建实记</title>
    <link href="/2022/03/09/01_blog-build/"/>
    <url>/2022/03/09/01_blog-build/</url>
    
    <content type="html"><![CDATA[<h1 id="WHY"><a href="#WHY" class="headerlink" title="WHY"></a>WHY</h1><p>用户更喜欢算法推荐的各种内容待在信息茧房自娱，且也不会有刷不完的时候<br>这是Blog概念冷却后新信息平台的优势</p><p>Blog的记录属性是要大于分享的，可以没有观众面向自己定格当时的idea<br>纵使要自己搭图床传图片做压缩，极差的SEO<br>但不用担心文章消失平台跑路<br>关键关键由于是个人搭建，所有的内容UI都可以自定义，让页面变成自己的形状（大雾）</p><blockquote><p>在互联网里拉点自己的屎</p></blockquote><h1 id="前置准备"><a href="#前置准备" class="headerlink" title="前置准备"></a>前置准备</h1><ol><li>git环境</li><li>node环境</li><li>github新仓库<br>命名要求:  <code>&#123;&#123;username&#125;&#125;.github.io</code></li></ol><h1 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h1><p>全局安装hexo</p><figure><div class="code-wrapper"><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">npm i <span class="token operator">-</span>g hexo-<span class="token function">cli</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><br><p>初始化博客文件夹</p><figure><div class="code-wrapper"><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">hexo init <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span>folder<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>npm i<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></div></figure><p>进入文件夹后</p><figure><div class="code-wrapper"><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>默认启动在 localhost:4000 就已经有第一个页面啦</p><p><img src="https://blog-img-1309919152.cos.ap-nanjing.myqcloud.com/blog1-%E6%90%AD%E5%BB%BA%E5%AE%9E%E8%AE%B0/hexo%E9%BB%98%E8%AE%A4%E4%B8%BB%E9%A2%98.png?imageMogr2/format/webp" alt="默认主题"></p><p>(默认主题landspace如上，后面再提其他主题配置)</p><h1 id="部署到-GitHub"><a href="#部署到-GitHub" class="headerlink" title="部署到 GitHub"></a>部署到 GitHub</h1><p>这里默认已经有了命名好的仓库</p><h2 id="Step1-安装-Git-部署相关插件"><a href="#Step1-安装-Git-部署相关插件" class="headerlink" title="Step1. 安装 Git 部署相关插件"></a>Step1. 安装 Git 部署相关插件</h2><figure><div class="code-wrapper"><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">$ npm i hexo-deployer-git <span class="token operator">--</span>save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><h2 id="Step2-修改配置"><a href="#Step2-修改配置" class="headerlink" title="Step2. 修改配置"></a>Step2. 修改配置</h2><p>修改根目录 _config.yml 文件中 deploy 字段</p><figure><div class="code-wrapper"><pre class="line-numbers language-json" data-language="json"><code class="language-json">deploy<span class="token operator">:</span>  type<span class="token operator">:</span> 'git'  repo<span class="token operator">:</span>  https<span class="token operator">:</span><span class="token comment">//github.com/username/username.github.io.git</span>  branch<span class="token operator">:</span> main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><ul><li>repo: 改为自己的仓库地址</li><li>branch: 选择部署分支，默认main</li></ul><blockquote><p>从 2020 年 10 月 1 日开始，GitHub 上的所有新库都将用中性词「main」命名，取代原来的「master」，因为后者是一个容易让人联想到奴隶制的术语。（笑</p></blockquote><h2 id="Step3-指令部署"><a href="#Step3-指令部署" class="headerlink" title="Step3. 指令部署"></a>Step3. 指令部署</h2><p>用以下指令部署到网站上</p><figure><div class="code-wrapper"><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></div></figure><p>！然后就可以访问线上域名惹<br><code>https://username.github.io</code></p><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><ul><li>hexo new 新建文章</li><li>hexo server 启动本地服务器</li><li>hexo clean 清除缓存文件和已生成的静态文件</li><li>hexo generate 生成静态文件 (public文件夹)</li><li>hexo deploy 部署网站</li></ul><p>通常在完成每次修改后，会依次执行 clean -&gt; generate -&gt; deploy 避免更新不完全</p><p>以上指令都可以首字母缩写</p><figure><div class="code-wrapper"><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">hexo nhexo shexo ghexo d <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></div></figure><h1 id="结"><a href="#结" class="headerlink" title="结"></a>结</h1><p>不知道能坚持多久)</p>]]></content>
    
    
    
    <tags>
      
      <tag>code</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
